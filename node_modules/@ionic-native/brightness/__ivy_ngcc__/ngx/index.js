import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Brightness = /** @class */ (function (_super) {
    __extends(Brightness, _super);
    function Brightness() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Brightness.prototype.setBrightness = function (value) { return cordova(this, "setBrightness", {}, arguments); };
    Brightness.prototype.getBrightness = function () { return cordova(this, "getBrightness", {}, arguments); };
    Brightness.prototype.setKeepScreenOn = function (value) { return cordova(this, "setKeepScreenOn", {}, arguments); };
    Brightness.pluginName = "Brightness";
    Brightness.plugin = "cordova-plugin-brightness";
    Brightness.pluginRef = "cordova.plugins.brightness";
    Brightness.repo = "https://github.com/mgcrea/cordova-plugin-brightness";
    Brightness.platforms = ["Android", "iOS"];
Brightness.ɵfac = function Brightness_Factory(t) { return ɵBrightness_BaseFactory(t || Brightness); };
Brightness.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Brightness, factory: function (t) { return Brightness.ɵfac(t); } });
var ɵBrightness_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Brightness);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Brightness, [{
        type: Injectable
    }], null, null); })();
    return Brightness;
}(IonicNativePlugin));
export { Brightness };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvYnJpZ2h0bmVzcy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7QUFDeEU7QUFJVyxJQXlCcUIsOEJBQWlCO0FBQUM7QUFFOUI7QUFFMkI7QUFBTSxJQUluRCxrQ0FBYSxhQUFDLEtBQWE7QUFLVCxJQU1sQixrQ0FBYTtBQUtpQixJQUk5QixvQ0FBZSxhQUFDLEtBQWM7QUFFa0I7QUFBMEM7QUFBcUQ7QUFBeUQ7QUFBNkU7SUE5QjFRLFVBQVUsd0JBRHRCLFVBQVUsRUFBRSxRQUNBLFVBQVU7Ozs7OzBCQUFFO0FBQUMscUJBL0IxQjtBQUFFLEVBK0I4QixpQkFBaUI7QUFDaEQsU0FEWSxVQUFVO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBCcmlnaHRuZXNzXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBCcmlnaHRuZXNzIHBsdWdpbiBsZXQgeW91IGNvbnRyb2wgdGhlIGRpc3BsYXkgYnJpZ2h0bmVzcyBvZiB5b3VyIGRldmljZS5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWJyaWdodG5lc3NgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQnJpZ2h0bmVzcyBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL21nY3JlYS9jb3Jkb3ZhLXBsdWdpbi1icmlnaHRuZXNzKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJyaWdodG5lc3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2JyaWdodG5lc3Mvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJyaWdodG5lc3M6IEJyaWdodG5lc3MpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIGxldCBicmlnaHRuZXNzVmFsdWUgPSAwLjg7XG4gKiB0aGlzLmJyaWdodG5lc3Muc2V0QnJpZ2h0bmVzcyhicmlnaHRuZXNzVmFsdWUpO1xuICogYGBgXG4gKlxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0JyaWdodG5lc3MnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1icmlnaHRuZXNzJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmJyaWdodG5lc3MnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21nY3JlYS9jb3Jkb3ZhLXBsdWdpbi1icmlnaHRuZXNzJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJyaWdodG5lc3MgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBicmlnaHRuZXNzIG9mIHRoZSBkaXNwbGF5LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgRmxvYXRpbmcgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbiB3aGljaCBjYXNlIDEgbWVhbnMgMTAwJSBicmlnaHRuZXNzIGFuZCAwIG1lYW5zIDAlIGJyaWdodG5lc3MuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgc2V0dGluZyBicmlnaHRuZXNzIHdhcyBzdWNjZXNzZnVsLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRCcmlnaHRuZXNzKHZhbHVlOiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgY3VycmVudCBicmlnaHRuZXNzIG9mIHRoZSBkZXZpY2UgZGlzcGxheS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZVxuICAgKiBicmlnaHRuZXNzIHZhbHVlIG9mIHRoZSBkZXZpY2UgZGlzcGxheSAoZmxvYXRpbmcgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSkuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEJyaWdodG5lc3MoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogS2VlcHMgdGhlIHNjcmVlbiBvbi4gUHJldmVudHMgdGhlIGRldmljZSBmcm9tIHNldHRpbmcgdGhlIHNjcmVlbiB0byBzbGVlcC5cbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRLZWVwU2NyZWVuT24odmFsdWU6IGJvb2xlYW4pOiB2b2lkIHt9XG59XG4iXX0=