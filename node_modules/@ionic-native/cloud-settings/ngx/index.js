import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CloudSettings = /** @class */ (function (_super) {
    __extends(CloudSettings, _super);
    function CloudSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudSettings.prototype.exists = function () { return cordova(this, "exists", {}, arguments); };
    CloudSettings.prototype.save = function (settings, overwrite) { return cordova(this, "save", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CloudSettings.prototype.load = function () { return cordova(this, "load", {}, arguments); };
    CloudSettings.prototype.onRestore = function (handler) { return cordova(this, "onRestore", { "sync": true }, arguments); };
    CloudSettings.prototype.enableDebug = function () { return cordova(this, "enableDebug", {}, arguments); };
    CloudSettings.pluginName = "CloudSettings";
    CloudSettings.plugin = "cordova-plugin-cloud-settings";
    CloudSettings.pluginRef = "cordova.plugin.cloudsettings";
    CloudSettings.repo = "https://github.com/dpa99c/cordova-plugin-cloud-settings";
    CloudSettings.install = "ionic cordova plugin add cordova-plugin-cloud-settings --variable ANDROID_BACKUP_SERVICE_KEY=myapikey";
    CloudSettings.installVariables = ["ANDROID_BACKUP_SERVICE_KEY"];
    CloudSettings.platforms = ["Android", "iOS"];
    CloudSettings = __decorate([
        Injectable()
    ], CloudSettings);
    return CloudSettings;
}(IonicNativePlugin));
export { CloudSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Nsb3VkLXNldHRpbmdzL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXVDckMsaUNBQWlCOzs7O0lBTWxELDhCQUFNO0lBZU4sNEJBQUksYUFBQyxRQUFhLEVBQUUsU0FBbUI7SUFTdkMsNEJBQUk7SUFTSixpQ0FBUyxhQUFDLE9BQWlCO0lBTzNCLG1DQUFXOzs7Ozs7OztJQTlDQSxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWE7d0JBeEMxQjtFQXdDbUMsaUJBQWlCO1NBQXZDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBDbG91ZCBTZXR0aW5nc1xuICogQGRlc2NyaXB0aW9uXG4gKiBTdG9yZXMgYXBwIHNldHRpbmdzIGluIGNsb3VkIHN0b3JhZ2Ugc28gaWYgdGhlIHVzZXIgcmUtaW5zdGFsbHMgdGhlIGFwcCBvciBpbnN0YWxscyBpdCBvbiBhIGRpZmZlcmVudCBkZXZpY2UsIHRoZSBzZXR0aW5ncyB3aWxsIGJlIHJlc3RvcmVkIGFuZCBhdmFpbGFibGUgaW4gdGhlIG5ldyBpbnN0YWxsYXRpb24uXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDbG91ZFNldHRpbmdzIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jbG91ZC1zZXR0aW5ncy9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsb3VkU2V0dGluZ3M6IENsb3VkU2V0dGluZ3MpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuY2xvdWRTZXR0aW5ncy5leGlzdHMoKVxuICogICAudGhlbigoZXhpc3RzOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhcIlNhdmVkIHNldHRpbmdzIGV4aXN0OiBcIiArIGV4aXN0cykgKVxuICpcbiAqIHRoaXMuY2xvdWRTZXR0aW5ncy5sb2FkKClcbiAqICAgLnRoZW4oKHNldHRpbmdzOiBhbnkpID0+IHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncylcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogdGhpcy5jbG91ZFNldHRpbmdzLnNhdmUodGhpcy5zZXR0aW5ncylcbiAqICAgLnRoZW4oKHNhdmVkU2V0dGluZ3M6IGFueSkgPT4gY29uc29sZS5sb2coXCJTYXZlZCBzZXR0aW5nczogXCIgKyBKU09OLnN0cmluZ2lmeShzYXZlZFNldHRpbmdzKSkpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0Nsb3VkU2V0dGluZ3MnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1jbG91ZC1zZXR0aW5ncycsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2luLmNsb3Vkc2V0dGluZ3MnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9jb3Jkb3ZhLXBsdWdpbi1jbG91ZC1zZXR0aW5ncycsXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tY2xvdWQtc2V0dGluZ3MgLS12YXJpYWJsZSBBTkRST0lEX0JBQ0tVUF9TRVJWSUNFX0tFWT1teWFwaWtleScsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnQU5EUk9JRF9CQUNLVVBfU0VSVklDRV9LRVknXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENsb3VkU2V0dGluZ3MgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgYW55IHN0b3JlZCBjbG91ZCBzZXR0aW5ncyBjdXJyZW50bHkgZXhpc3QgZm9yIHRoZSBjdXJyZW50IHVzZXIuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFdpbGwgYmUgcGFzc2VkIGEgYm9vbGVhbiBmbGFnIHdoaWNoIGluZGljYXRlcyB3aGV0aGVyIGFuIHN0b3JlIHNldHRpbmdzIGV4aXN0IGZvciB0aGUgdXNlci5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZXhpc3RzKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyB0aGUgc2V0dGluZ3MgdG8gY2xvdWQgYmFja3VwLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgLSBhIEpTT04gc3RydWN0dXJlIHJlcHJlc2VudGluZyB0aGUgdXNlciBzZXR0aW5ncyB0byBzYXZlIHRvIGNsb3VkIGJhY2t1cC5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3ZlcndyaXRlXSAtIChvcHRpb25hbCkgaWYgdHJ1ZSwgZXhpc3Rpbmcgc2V0dGluZ3Mgd2lsbCBiZSByZXBsYWNlZCByYXRoZXIgdGhhbiB1cGRhdGVkLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICogSWYgZmFsc2UsIGV4aXN0aW5nIHNldHRpbmdzIHdpbGwgYmUgbWVyZ2VkIHdpdGggdGhlIG5ldyBzZXR0aW5ncyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBXaWxsIGJlIHBhc3NlZCBhIHNpbmdsZSBvYmplY3QgYXJndW1lbnQgd2hpY2ggY29udGFpbnMgdGhlIHNhdmVkIHNldHRpbmdzIGFzIGEgSlNPTiBvYmplY3QuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIHNhdmUoc2V0dGluZ3M6IGFueSwgb3ZlcndyaXRlPzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBjdXJyZW50IHNldHRpbmdzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFdpbGwgYmUgcGFzc2VkIGEgc2luZ2xlIG9iamVjdCBhcmd1bWVudCB3aGljaCBjb250YWlucyB0aGUgc2F2ZWQgc2V0dGluZ3MgYXMgYSBKU09OIG9iamVjdC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9hZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCBpZi93aGVuIHNldHRpbmdzIG9uIHRoZSBkZXZpY2UgaGF2ZSBiZWVuIHVwZGF0ZWQgZnJvbSB0aGUgY2xvdWQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiBkZXZpY2Ugc2V0dGluZ3MgaGF2ZSBiZWVuIHVwZGF0ZWQgZnJvbSB0aGUgY2xvdWQuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgb25SZXN0b3JlKGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBPdXRwdXRzIHZlcmJvc2UgbG9nIG1lc3NhZ2VzIGZyb20gdGhlIG5hdGl2ZSBwbHVnaW4gY29tcG9uZW50cyB0byB0aGUgSlMgY29uc29sZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZW5hYmxlRGVidWcoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=