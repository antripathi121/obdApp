{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Cloud Settings\n * @description\n * Stores app settings in cloud storage so if the user re-installs the app or installs it on a different device, the settings will be restored and available in the new installation.\n *\n * @usage\n * ```typescript\n * import { CloudSettings } from '@ionic-native/cloud-settings/ngx';\n *\n *\n * constructor(private cloudSettings: CloudSettings) { }\n *\n * ...\n *\n * this.cloudSettings.exists()\n *   .then((exists: boolean) => console.log(\"Saved settings exist: \" + exists) )\n *\n * this.cloudSettings.load()\n *   .then((settings: any) => this.settings = settings)\n *   .catch((error: any) => console.error(error));\n *\n * this.cloudSettings.save(this.settings)\n *   .then((savedSettings: any) => console.log(\"Saved settings: \" + JSON.stringify(savedSettings)))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\nexport declare class CloudSettings extends IonicNativePlugin {\n    /**\n     * Indicates if any stored cloud settings currently exist for the current user.\n     * @return {Promise<boolean>} Will be passed a boolean flag which indicates whether an store settings exist for the user.\n     */\n    exists(): Promise<boolean>;\n    /**\n     * Saves the settings to cloud backup.\n     * @param {object} settings - a JSON structure representing the user settings to save to cloud backup.\n     * @param {boolean} [overwrite] - (optional) if true, existing settings will be replaced rather than updated. Defaults to false.\n     * If false, existing settings will be merged with the new settings passed to this function.\n     * @return {Promise<any>} Will be passed a single object argument which contains the saved settings as a JSON object.\n     */\n    save(settings: any, overwrite?: boolean): Promise<any>;\n    /**\n     * Loads the current settings.\n     * @return {Promise<any>} Will be passed a single object argument which contains the saved settings as a JSON object.\n     */\n    load(): Promise<any>;\n    /**\n     * Registers a function which will be called if/when settings on the device have been updated from the cloud.\n     * @param {Function} handler - callback function to invoke when device settings have been updated from the cloud.\n     */\n    onRestore(handler: Function): void;\n    /**\n     * Outputs verbose log messages from the native plugin components to the JS console.\n     * @return {Promise<void>}\n     */\n    enableDebug(): Promise<void>;\n}\n"]}